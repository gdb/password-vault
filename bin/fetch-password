#!/usr/bin/env ruby
require 'optparse'
require 'net/http'
require 'pathname'

actualfile = Pathname.new(__FILE__).realpath

require File.join(File.dirname(actualfile), '../lib/subprocess')
require File.join(File.dirname(actualfile), '../lib/password_vault')

@options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [password...]"

  @options[:user] = ENV['USER']
  opts.on('-u', '--user USER', 'Username to request passwords as') do |user|
    @options[:user] = user
  end

  @options[:server] = 'vault.backend'
  opts.on('-s', '--server SERVER', 'Server from which to fetch passwords') do |server|
    @options[:server] = server
  end

  @options[:port] = 22
  opts.on('-p', '--port PORT', 'Server port to which to connect') do |port|
    @options[:port] = port
  end

  opts.on('-h', '--help', 'Display this message') do
    puts opts
    exit(1)
  end
end
optparse.parse!

def query(uri)
  begin
    Subprocess.check_call(['ssh', '-l', @options[:user], @options[:server], '-p',
                           @options[:port].to_s,
                           "curl http://#{PasswordVault::BIND}:#{PasswordVault::PORT}/#{uri} 2>/dev/null"],
                          :stdout => Subprocess::PIPE,
                          :stderr => Subprocess::DEVNULL) do |_, _, stdout, _|
      @ret = stdout.read()
    end
    @ret
  rescue Subprocess::SpawnError => e
    $stderr.puts "Command #{e.cmd.inspect} failed with exit status #{e.exitstatus}."
    exit(e.exitstatus)
  end
end

if ARGV.length == 0
  # Print a password list
  res = query(PasswordVault.escape(@options[:user]))
  print 'Available passwords: '
  puts res
else
  ARGV.each do |password_name|
    password_name = "#{password_name}.gpg" unless password_name.end_with? '.gpg'
    if not PasswordVault.name_ok?(password_name)
      puts "Invalid password name #{password_name}"
      next
    end

    res = query("#{PasswordVault.escape(password_name)}/#{PasswordVault.escape(@options[:user])}")

    if res.length > 0
      puts "Contents of #{password_name}:" if $stdout.isatty
      Subprocess.check_call(['gpg', '--decrypt'],
                            :stdin => Subprocess::PIPE,
                            :stdout => Subprocess::PIPE) do |_, stdin, stdout, _|
        stdin.print(res)
        stdin.close()

        print stdout.read()
        puts if $stdout.isatty
      end
    else
      puts "Invalid request for #{password_name}"
    end
  end
end
