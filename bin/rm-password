#!/usr/bin/env ruby
require 'logger'
require 'optparse'
require 'pathname'

actualfile = Pathname.new(__FILE__).realpath

require File.join(File.dirname(actualfile), '../lib/subprocess')
require File.join(File.dirname(actualfile), '../lib/password_vault')

@log = Logger.new(STDOUT)
@log.level = Logger::INFO

@options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] service_name

Add a password to the vault"

  @options[:user] = ENV['USER']
  opts.on('-u', '--user USER', 'Username to submit passwords as') do |user|
    @options[:user] = user
  end

  @options[:server] = 'vault.backend'
  opts.on('-s', '--server SERVER', 'Server from which to fetch passwords') do |server|
    @options[:server] = server
  end

  @options[:port] = 22
  opts.on('-p', '--port PORT', 'Server port to which to connect') do |port|
    @options[:port] = port
  end

  @options[:recipients] = []
  opts.on('-r', '--recipients RECIPIENT', 'Users to encrypt the passwords to (can pass multiple times)') do |recipient|
    @options[:recipients].push(recipient)
  end

  opts.on('-h', '--help', 'Display this message') do
    puts opts
    exit(1)
  end
end
optparse.parse!

if ARGV.length == 0
  puts optparse
  exit(1)
end
ARGV.each do |password_name|
  password_name = "#{password_name}.gpg" unless password_name.end_with?('.gpg')
  if not PasswordVault.name_ok?(password_name)
    puts "Invalid format for password name"
    exit(1)
  end

  @log.info("Deleting password to #{password_name}")
  # Be careful that VAULT does not have spaces, etc.
  uri = "#{PasswordVault.escape(password_name)}/delete/#{PasswordVault.escape(@options[:user])}"
  Subprocess.check_call(['ssh', '-l', @options[:user], @options[:server], '-p', @options[:port].to_s,
                         "curl http://#{PasswordVault::BIND}:#{PasswordVault::PORT}/#{uri} 2>/dev/null"])
end
